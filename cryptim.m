//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: cryptim.java
//
//  Created by hafidzi on 4/3/14.
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "cryptim.h"
#include "java/io/PrintStream.h"
#include "java/lang/Character.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"

@implementation cryptim

static NSString * cryptim_tempKeyD_ = @"";
static NSString * cryptim_tempCodeD_ = @"";
static NSString * cryptim_outputc_ = @"";
static NSString * cryptim_outputh_ = @"";
static NSString * cryptim_inEnTextArea_ = @"";
static NSString * cryptim_inTempTextArea_ = @"";
static NSString * cryptim_inDeTextArea_ = @"";
static NSString * cryptim_fKTextArea_ = @"";
static NSString * cryptim_fPTextArea_ = @"";
static NSString * cryptim_fBrowseTextField_ = @"";

+ (NSString *)tempKeyD {
  return cryptim_tempKeyD_;
}

+ (void)setTempKeyD:(NSString *)tempKeyD {
  JreOperatorRetainedAssign(&cryptim_tempKeyD_, nil, tempKeyD);
}

+ (NSString *)tempCodeD {
  return cryptim_tempCodeD_;
}

+ (void)setTempCodeD:(NSString *)tempCodeD {
  JreOperatorRetainedAssign(&cryptim_tempCodeD_, nil, tempCodeD);
}

+ (NSString *)outputc {
  return cryptim_outputc_;
}

+ (void)setOutputc:(NSString *)outputc {
  JreOperatorRetainedAssign(&cryptim_outputc_, nil, outputc);
}

+ (NSString *)outputh {
  return cryptim_outputh_;
}

+ (void)setOutputh:(NSString *)outputh {
  JreOperatorRetainedAssign(&cryptim_outputh_, nil, outputh);
}

+ (NSString *)inEnTextArea {
  return cryptim_inEnTextArea_;
}

+ (void)setInEnTextArea:(NSString *)inEnTextArea {
  JreOperatorRetainedAssign(&cryptim_inEnTextArea_, nil, inEnTextArea);
}

+ (NSString *)inTempTextArea {
  return cryptim_inTempTextArea_;
}

+ (void)setInTempTextArea:(NSString *)inTempTextArea {
  JreOperatorRetainedAssign(&cryptim_inTempTextArea_, nil, inTempTextArea);
}

+ (NSString *)inDeTextArea {
  return cryptim_inDeTextArea_;
}

+ (void)setInDeTextArea:(NSString *)inDeTextArea {
  JreOperatorRetainedAssign(&cryptim_inDeTextArea_, nil, inDeTextArea);
}

+ (NSString *)fKTextArea {
  return cryptim_fKTextArea_;
}

+ (void)setFKTextArea:(NSString *)fKTextArea {
  JreOperatorRetainedAssign(&cryptim_fKTextArea_, nil, fKTextArea);
}

+ (NSString *)fPTextArea {
  return cryptim_fPTextArea_;
}

+ (void)setFPTextArea:(NSString *)fPTextArea {
  JreOperatorRetainedAssign(&cryptim_fPTextArea_, nil, fPTextArea);
}

+ (NSString *)fBrowseTextField {
  return cryptim_fBrowseTextField_;
}

+ (void)setFBrowseTextField:(NSString *)fBrowseTextField {
  JreOperatorRetainedAssign(&cryptim_fBrowseTextField_, nil, fBrowseTextField);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  [[[cryptim alloc] init] autorelease];
}

- (void)RotWordWithIntArray:(IOSIntArray *)temp {
  int a;
  a = IOSIntArray_Get(nil_chk(temp), 0);
  (*IOSIntArray_GetRef(temp, 0)) = IOSIntArray_Get(temp, 1);
  (*IOSIntArray_GetRef(temp, 1)) = IOSIntArray_Get(temp, 2);
  (*IOSIntArray_GetRef(temp, 2)) = IOSIntArray_Get(temp, 3);
  (*IOSIntArray_GetRef(temp, 3)) = a;
}

- (int)SubWordWithInt:(int)a {
  int x = a / 16;
  int y = a % 16;
  return IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(S_box_), x)), y);
}

- (int)SubWord_inverseWithInt:(int)a {
  int x = a / 16;
  int y = a % 16;
  return IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(S_box_inverse_), x)), y);
}

- (NSString *)hexFormatWithInt:(int)integer {
  JavaLangStringBuffer *buf = [[[JavaLangStringBuffer alloc] initWithInt:2] autorelease];
  if (((int) integer & (int) 0xff) < (int) 0x10) {
    [buf appendWithNSString:@"0"];
  }
  [buf appendWithNSString:[JavaLangLong toStringWithLong:(int) integer & (int) 0xff withInt:16]];
  return [buf description];
}

- (void)keyGeneration {
  int KIRALOOPKEY = 0;
  IOSIntArray *temp = [IOSIntArray arrayWithLength:4];
  for (int i = 0; i < 16; i++) {
    (*IOSIntArray_GetRef(nil_chk(extend_key_), i)) = IOSIntArray_Get(nil_chk(key_), i);
  }
  for (int i = 4; i < 44; i++) {
    for (int j = 0; j < 4; j++) {
      (*IOSIntArray_GetRef(temp, j)) = IOSIntArray_Get(nil_chk(extend_key_), (i - 1) * 4 + j);
    }
    if (i % 4 == 0) {
      [self RotWordWithIntArray:temp];
      for (int j = 0; j < 4; j++) {
        (*IOSIntArray_GetRef(temp, j)) = [self SubWordWithInt:IOSIntArray_Get(temp, j)];
        if (j == 0) {
          (*IOSIntArray_GetRef(temp, j)) = IOSIntArray_Get(temp, j) ^ IOSIntArray_Get(nil_chk(Rcon_), i / 4);
        }
      }
    }
    for (int j = 0; j < 4; j++) {
      (*IOSIntArray_GetRef(nil_chk(extend_key_), (i - 0) * 4 + j)) = IOSIntArray_Get(extend_key_, (i - 4) * 4 + j) ^ IOSIntArray_Get(temp, j);
      KIRALOOPKEY++;
      JavaLangStringBuffer *buf = [[[JavaLangStringBuffer alloc] initWithInt:20] autorelease];
    }
  }
}

- (void)msgEncrypt {
  int i = 0;
  for (int j = 0; j < 4; j++) {
    for (int k = 0; k < 4; k++) {
      (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(State_), k)), j)) = IOSIntArray_Get(nil_chk(extend_key_), i) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, k)), j);
      i++;
    }
  }
  for (int time = 1; time < 11; time++) {
    [self roundLoopWithInt:time];
  }
}

- (void)roundLoopWithInt:(int)time {
  for (int i = 0; i < 4; i++) {
    for (int j = 0; j < 4; j++) {
      (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(State_), j)), i)) = [self SubWordWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, j)), i)];
    }
  }
  if (time != 10) {
    [self MixColumn];
  }
  int k = 0;
  for (int i = 0; i < 4; i++) {
    for (int j = 0; j < 4; j++) {
      (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(State_), j)), i)) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, j)), i) ^ IOSIntArray_Get(nil_chk(extend_key_), time * 16 + k);
      k++;
    }
  }
}

- (void)MixColumn {
  IOSObjectArray *temp = [IOSIntArray arrayWithDimensions:2 lengths:(int[]){ 4, 4 }];
  for (int i = 0; i < 4; i++) {
    (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(temp, 0)), i)) = [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(State_), 0)), i) withInt:2] ^ [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 1)), i) withInt:3] ^ [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 2)), i) withInt:1] ^ [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 3)), i) withInt:1];
    (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(temp, 1)), i)) = [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 0)), i) withInt:1] ^ [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 1)), i) withInt:2] ^ [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 2)), i) withInt:3] ^ [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 3)), i) withInt:1];
    (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(temp, 2)), i)) = [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 0)), i) withInt:1] ^ [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 1)), i) withInt:1] ^ [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 2)), i) withInt:2] ^ [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 3)), i) withInt:3];
    (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(temp, 3)), i)) = [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 0)), i) withInt:3] ^ [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 1)), i) withInt:1] ^ [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 2)), i) withInt:1] ^ [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 3)), i) withInt:2];
  }
  for (int j = 0; j < 4; j++) {
    for (int k = 0; k < 4; k++) {
      (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(State_), k)), j)) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(temp, k)), j);
    }
  }
}

- (int)MultiWithInt:(int)a
            withInt:(int)b {
  IOSIntArray *temp = [IOSIntArray arrayWithLength:8];
  IOSIntArray *flag = [IOSIntArray arrayWithLength:8];
  int c = b;
  for (int i = 0; i < 8; i++) {
    int c1, c2;
    c1 = c / 2;
    c2 = c % 2;
    if (c2 == 1) {
      (*IOSIntArray_GetRef(flag, i)) = 1;
    }
    else {
      (*IOSIntArray_GetRef(flag, i)) = 0;
    }
    c = c1;
    if (i == 0) {
      (*IOSIntArray_GetRef(temp, i)) = a;
    }
    else {
      (*IOSIntArray_GetRef(temp, i)) = IOSIntArray_Get(temp, i - 1) * 2;
      if (IOSIntArray_Get(temp, i) > 255) {
        (*IOSIntArray_GetRef(temp, i)) = (IOSIntArray_Get(temp, i) % 256) ^ 27;
      }
    }
  }
  a = 0;
  for (int i = 0; i < 8; i++) {
    a = a ^ (IOSIntArray_Get(temp, i) * IOSIntArray_Get(flag, i));
  }
  return a;
}

- (void)msgDecrypt {
  int i, j;
  for (int l = 0; l < 4; l++) {
    for (int k = 0; k < 4; k++) {
    }
  }
  for (i = 0, j = 160; i < 4; i++) {
    for (int k = 0; k < 4; k++) {
      (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(State_), k)), i)) = IOSIntArray_Get(nil_chk(extend_key_), j) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, k)), i);
      j++;
    }
  }
  for (int time = 1; time < 11; time++) {
    [self roundLoop_inverseWithInt:time];
  }
}

- (void)roundLoop_inverseWithInt:(int)time {
  for (int j = 0; j < 4; j++) {
    for (int k = 0; k < 4; k++) {
      (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(State_), k)), j)) = [self SubWord_inverseWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, k)), j)];
    }
  }
  int i = 0;
  for (int j = 0; j < 4; j++) {
    for (int k = 0; k < 4; k++) {
      (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(State_), k)), j)) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, k)), j) ^ IOSIntArray_Get(nil_chk(extend_key_), 160 - time * 16 + i);
      i++;
    }
  }
  if (time != 10) {
    [self MixColumn_inverse];
  }
}

- (void)MixColumn_inverse {
  IOSObjectArray *temp = [IOSIntArray arrayWithDimensions:2 lengths:(int[]){ 4, 4 }];
  for (int i = 0; i < 4; i++) {
    (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(temp, 0)), i)) = [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(State_), 0)), i) withInt:14] ^ [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 1)), i) withInt:11] ^ [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 2)), i) withInt:13] ^ [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 3)), i) withInt:9];
    (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(temp, 1)), i)) = [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 0)), i) withInt:9] ^ [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 1)), i) withInt:14] ^ [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 2)), i) withInt:11] ^ [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 3)), i) withInt:13];
    (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(temp, 2)), i)) = [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 0)), i) withInt:13] ^ [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 1)), i) withInt:9] ^ [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 2)), i) withInt:14] ^ [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 3)), i) withInt:11];
    (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(temp, 3)), i)) = [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 0)), i) withInt:11] ^ [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 1)), i) withInt:13] ^ [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 2)), i) withInt:9] ^ [self MultiWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(State_, 3)), i) withInt:14];
  }
  for (int j = 0; j < 4; j++) {
    for (int k = 0; k < 4; k++) {
      (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(State_), k)), j)) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(temp, k)), j);
    }
  }
}

- (void)getSliceWithIntArray:(IOSIntArray *)codeNum {
  int i = 0;
  for (int j = 0; j < 4; j++) {
    for (int k = 0; k < 4; k++) {
      (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(State_), k)), j)) = IOSIntArray_Get(nil_chk(codeNum), i);
      i++;
    }
  }
}

- (void)getSlicetoCubeXWithInt:(int)slice
                  withIntArray:(IOSIntArray *)codeNum {
  int i = 0;
  for (int j = 0; j < 4; j++) {
    for (int k = 0; k < 4; k++) {
      (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(sliceState_), slice)), k)), j)) = IOSIntArray_Get(nil_chk(codeNum), i);
      i++;
    }
  }
}

- (void)getSlicetoCubeYWithInt:(int)slice
                  withIntArray:(IOSIntArray *)codeNum {
  int i = 0;
  for (int j = 0; j < 4; j++) {
    for (int k = 0; k < 4; k++) {
      (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(sliceState_), k)), slice)), j)) = IOSIntArray_Get(nil_chk(codeNum), i);
      i++;
    }
  }
}

- (void)getSlicetoCubeZWithInt:(int)slice
                  withIntArray:(IOSIntArray *)codeNum {
  int i = 0;
  for (int j = 0; j < 4; j++) {
    for (int k = 0; k < 4; k++) {
      (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(sliceState_), k)), j)), slice)) = IOSIntArray_Get(nil_chk(codeNum), i);
      i++;
    }
  }
}

- (void)getRotateSliceWithInt:(int)axis {
  int i = 0;
  switch (axis) {
    case 0:
    for (int j = 0; j < 4; j++) {
      for (int k = 0; k < 4; k++) {
        (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(State_), k)), j)) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(sliceState_), 0)), k)), j);
        i++;
      }
    }
    break;
    case 1:
    for (int j = 0; j < 4; j++) {
      for (int k = 0; k < 4; k++) {
        (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(State_), 3 - j)), k)) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(sliceState_), 1)), k)), j);
        i++;
      }
    }
    break;
    case 2:
    for (int j = 0; j < 4; j++) {
      for (int k = 0; k < 4; k++) {
        (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(State_), 3 - k)), 3 - j)) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(sliceState_), 2)), k)), j);
        i++;
      }
    }
    break;
    case 3:
    for (int j = 0; j < 4; j++) {
      for (int k = 0; k < 4; k++) {
        (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(State_), j)), 3 - k)) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(sliceState_), 3)), k)), j);
        i++;
      }
    }
    break;
  }
}

- (void)outSliceWithIntArray:(IOSIntArray *)codeNum {
  int i = 0;
  for (int j = 0; j < 4; j++) {
    for (int k = 0; k < 4; k++) {
      (*IOSIntArray_GetRef(nil_chk(codeNum), i)) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(State_), k)), j);
      i++;
    }
  }
}

- (void)outRotateSliceWithInt:(int)slice
                 withIntArray:(IOSIntArray *)codeNum {
  int i = 0;
  switch (slice) {
    case 0:
    for (int j = 0; j < 4; j++) {
      for (int k = 0; k < 4; k++) {
        (*IOSIntArray_GetRef(nil_chk(codeNum), i)) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(State_), k)), j);
        i++;
      }
    }
    break;
    case 1:
    for (int j = 3; j >= 0; j--) {
      for (int k = 0; k < 4; k++) {
        (*IOSIntArray_GetRef(nil_chk(codeNum), i)) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(State_), j)), k);
        i++;
      }
    }
    break;
    case 2:
    for (int j = 3; j >= 0; j--) {
      for (int k = 3; k >= 0; k--) {
        (*IOSIntArray_GetRef(nil_chk(codeNum), i)) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(State_), k)), j);
        i++;
      }
    }
    break;
    case 3:
    for (int j = 0; j < 4; j++) {
      for (int k = 3; k >= 0; k--) {
        (*IOSIntArray_GetRef(nil_chk(codeNum), i)) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(State_), j)), k);
        i++;
      }
    }
    break;
  }
}

- (void)outSlicetoCubeWithInt:(int)slice
                 withIntArray:(IOSIntArray *)codeNum {
  int i = 0;
  for (int j = 0; j < 4; j++) {
    for (int k = 0; k < 4; k++) {
      (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(sliceState_), slice)), k)), j)) = IOSIntArray_Get(nil_chk(codeNum), i);
      i++;
    }
  }
}

- (void)getKeyWithIntArray:(IOSIntArray *)keyNum {
  for (int i = 0; i < 16; i++) {
    (*IOSIntArray_GetRef(nil_chk(key_), i)) = 0;
  }
  for (int j = 0; j < 4; j++) {
    for (int k = 0; k < 4; k++) {
      (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(State_), k)), j)) = 0;
    }
  }
  for (int i = 0; i < 16; i++) {
    (*IOSIntArray_GetRef(nil_chk(key_), i)) = IOSIntArray_Get(nil_chk(keyNum), i) ^ IOSIntArray_Get(key_, i);
  }
}

- (void)inEnX {
  int KIRALOOPMSG = 0;
  int KIRALOOPMSGc = 0;
  int y, i, j;
  IOSIntArray *codeNum = [IOSIntArray arrayWithLength:16];
  IOSIntArray *keyNum = [IOSIntArray arrayWithLength:16];
  NSString *tempKey = cryptim_tempKeyD_;
  NSString *tempCode = cryptim_tempCodeD_;
  int lengthKey = [((NSString *) nil_chk(tempKey)) length];
  int lengthCode = [((NSString *) nil_chk(tempCode)) length];
  if (lengthKey % 16 != 0) {
    for (i = lengthKey % 16; i < 16; i++) {
      tempKey = [NSString stringWithFormat:@"%@ ", tempKey];
    }
  }
  for (i = 0, j = 0; j < [tempKey length]; j++, i++) {
    KIRALOOPMSG++;
    (*IOSIntArray_GetRef(keyNum, i)) = [tempKey charAtWithInt:i];
    if (i == 15) {
      [self getKeyWithIntArray:keyNum];
      i = -1;
    }
  }
  [self keyGeneration];
  if (lengthCode % 64 != 0) {
    for (i = lengthCode % 64; i < 64; i++) {
      tempCode = [NSString stringWithFormat:@"%@ ", tempCode];
    }
  }
  int s;
  float progress = [tempCode length];
  for (s = 0, y = 0, i = 0, j = 0; j < [tempCode length]; j++, i++) {
    if ((j % 5) == 1) {
      [self displayProgressWithInt:(int) ((j / progress) * 100)];
    }
    KIRALOOPMSGc++;
    (*IOSIntArray_GetRef(codeNum, i)) = ([tempCode charAtWithInt:j]);
    if (i == 15) {
      switch (y) {
        case 0:
        [self getSlicetoCubeXWithInt:0 withIntArray:codeNum];
        y++;
        break;
        case 1:
        [self getSlicetoCubeXWithInt:1 withIntArray:codeNum];
        ;
        y++;
        break;
        case 2:
        [self getSlicetoCubeXWithInt:2 withIntArray:codeNum];
        ;
        y++;
        break;
        case 3:
        [self getSlicetoCubeXWithInt:3 withIntArray:codeNum];
        y = 0;
        s++;
        for (int slice = 0; slice < 4; slice++) {
          [self getRotateSliceWithInt:slice];
          [self msgEncrypt];
          [self outSliceWithIntArray:codeNum];
          for (i = 0; i < 16; i++) {
            JreOperatorRetainedAssign(&cryptim_outputc_, nil, [NSString stringWithFormat:@"%@%C", cryptim_outputc_, IOSCharArray_Get(nil_chk([JavaLangCharacter toCharsWithInt:IOSIntArray_Get(codeNum, i)]), 0)]);
            JreOperatorRetainedAssign(&cryptim_outputh_, nil, [NSString stringWithFormat:@"%@%@", cryptim_outputh_, [self hexFormatWithInt:IOSIntArray_Get(codeNum, i)]]);
          }
        }
        break;
      }
      i = -1;
    }
  }
  [self displayProgressWithInt:(int) ((j / progress) * 100)];
}

- (void)inDeX {
  int x, i, j;
  IOSIntArray *codeNum = [IOSIntArray arrayWithLength:16];
  IOSIntArray *keyNum = [IOSIntArray arrayWithLength:16];
  NSString *tempKey = cryptim_tempKeyD_;
  NSString *tempCode = cryptim_tempCodeD_;
  int lengthKey = [((NSString *) nil_chk(tempKey)) length];
  int lengthCode = [((NSString *) nil_chk(tempCode)) length];
  if (lengthKey % 16 != 0) {
    for (i = lengthKey % 16; i < 16; i++) {
      tempKey = [NSString stringWithFormat:@"%@ ", tempKey];
    }
  }
  for (i = 0, j = 0; j < [tempKey length]; j++, i++) {
    (*IOSIntArray_GetRef(keyNum, i)) = [tempKey charAtWithInt:i];
    if (i == 15) {
      [self getKeyWithIntArray:keyNum];
      i = -1;
    }
  }
  [self keyGeneration];
  if (lengthCode % 64 != 0) {
    for (i = lengthCode % 64; i < 64; i++) {
      tempCode = [NSString stringWithFormat:@"%@ ", tempCode];
    }
  }
  int t = 0;
  float progress = [tempCode length];
  for (x = 0, i = 0, j = 0; j < [tempCode length]; j++, i++) {
    if ((j % 5) == 1) {
      [self displayProgressWithInt:(int) ((j / progress) * 100)];
    }
    (*IOSIntArray_GetRef(codeNum, i)) = ([tempCode charAtWithInt:j]);
    if (i == 15) {
      [self getSliceWithIntArray:codeNum];
      [self msgDecrypt];
      switch (x) {
        case 0:
        [self outRotateSliceWithInt:0 withIntArray:codeNum];
        [self outSlicetoCubeWithInt:0 withIntArray:codeNum];
        x++;
        break;
        case 1:
        [self outRotateSliceWithInt:1 withIntArray:codeNum];
        [self outSlicetoCubeWithInt:1 withIntArray:codeNum];
        x++;
        break;
        case 2:
        [self outRotateSliceWithInt:2 withIntArray:codeNum];
        [self outSlicetoCubeWithInt:2 withIntArray:codeNum];
        x++;
        break;
        case 3:
        [self outRotateSliceWithInt:3 withIntArray:codeNum];
        [self outSlicetoCubeWithInt:3 withIntArray:codeNum];
        for (int jj = 0; jj < 4; jj++) {
          for (int kk = 0; kk < 4; kk++) {
            for (int ll = 0; ll < 4; ll++) {
              JreOperatorRetainedAssign(&cryptim_outputc_, nil, [NSString stringWithFormat:@"%@%C", cryptim_outputc_, IOSCharArray_Get(nil_chk([JavaLangCharacter toCharsWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(sliceState_), jj)), ll)), kk)]), 0)]);
            }
          }
        }
        x = 0;
        break;
      }
      i = -1;
    }
  }
  [self displayProgressWithInt:(int) ((j / progress) * 100)];
}

- (void)inEnY {
  int KIRALOOPMSG = 0;
  int KIRALOOPMSGc = 0;
  int y, i, j;
  IOSIntArray *codeNum = [IOSIntArray arrayWithLength:16];
  IOSIntArray *keyNum = [IOSIntArray arrayWithLength:16];
  NSString *tempKey = cryptim_tempKeyD_;
  NSString *tempCode = cryptim_tempCodeD_;
  int lengthKey = [((NSString *) nil_chk(tempKey)) length];
  int lengthCode = [((NSString *) nil_chk(tempCode)) length];
  if (lengthKey % 16 != 0) {
    for (i = lengthKey % 16; i < 16; i++) {
      tempKey = [NSString stringWithFormat:@"%@ ", tempKey];
    }
  }
  for (i = 0, j = 0; j < [tempKey length]; j++, i++) {
    KIRALOOPMSG++;
    (*IOSIntArray_GetRef(keyNum, i)) = [tempKey charAtWithInt:i];
    if (i == 15) {
      [self getKeyWithIntArray:keyNum];
      i = -1;
    }
  }
  [self keyGeneration];
  if (lengthCode % 64 != 0) {
    for (i = lengthCode % 64; i < 64; i++) {
      tempCode = [NSString stringWithFormat:@"%@ ", tempCode];
    }
  }
  int s;
  float progress = [tempCode length];
  for (s = 0, y = 0, i = 0, j = 0; j < [tempCode length]; j++, i++) {
    if ((j % 5) == 1) {
      [self displayProgressWithInt:(int) ((j / progress) * 100)];
    }
    KIRALOOPMSGc++;
    (*IOSIntArray_GetRef(codeNum, i)) = ([tempCode charAtWithInt:j]);
    if (i == 15) {
      switch (y) {
        case 0:
        [self getSlicetoCubeYWithInt:0 withIntArray:codeNum];
        y++;
        break;
        case 1:
        [self getSlicetoCubeYWithInt:1 withIntArray:codeNum];
        ;
        y++;
        break;
        case 2:
        [self getSlicetoCubeYWithInt:2 withIntArray:codeNum];
        ;
        y++;
        break;
        case 3:
        [self getSlicetoCubeYWithInt:3 withIntArray:codeNum];
        y = 0;
        s++;
        for (int slice = 0; slice < 4; slice++) {
          [self getRotateSliceWithInt:slice];
          [self msgEncrypt];
          [self outSliceWithIntArray:codeNum];
          for (i = 0; i < 16; i++) {
            JreOperatorRetainedAssign(&cryptim_outputc_, nil, [NSString stringWithFormat:@"%@%C", cryptim_outputc_, IOSCharArray_Get(nil_chk([JavaLangCharacter toCharsWithInt:IOSIntArray_Get(codeNum, i)]), 0)]);
            JreOperatorRetainedAssign(&cryptim_outputh_, nil, [NSString stringWithFormat:@"%@%@", cryptim_outputh_, [self hexFormatWithInt:IOSIntArray_Get(codeNum, i)]]);
          }
        }
        break;
      }
      i = -1;
    }
  }
  [self displayProgressWithInt:(int) ((j / progress) * 100)];
}

- (void)inDeY {
  int x, i, j;
  IOSIntArray *codeNum = [IOSIntArray arrayWithLength:16];
  IOSIntArray *keyNum = [IOSIntArray arrayWithLength:16];
  NSString *tempKey = cryptim_tempKeyD_;
  NSString *tempCode = cryptim_tempCodeD_;
  int lengthKey = [((NSString *) nil_chk(tempKey)) length];
  int lengthCode = [((NSString *) nil_chk(tempCode)) length];
  if (lengthKey % 16 != 0) {
    for (i = lengthKey % 16; i < 16; i++) {
      tempKey = [NSString stringWithFormat:@"%@ ", tempKey];
    }
  }
  for (i = 0, j = 0; j < [tempKey length]; j++, i++) {
    (*IOSIntArray_GetRef(keyNum, i)) = [tempKey charAtWithInt:i];
    if (i == 15) {
      [self getKeyWithIntArray:keyNum];
      i = -1;
    }
  }
  [self keyGeneration];
  if (lengthCode % 64 != 0) {
    for (i = lengthCode % 64; i < 64; i++) {
      tempCode = [NSString stringWithFormat:@"%@ ", tempCode];
    }
  }
  int t = 0;
  float progress = [tempCode length];
  for (x = 0, i = 0, j = 0; j < [tempCode length]; j++, i++) {
    if ((j % 5) == 1) {
      [self displayProgressWithInt:(int) ((j / progress) * 100)];
    }
    (*IOSIntArray_GetRef(codeNum, i)) = ([tempCode charAtWithInt:j]);
    if (i == 15) {
      [self getSliceWithIntArray:codeNum];
      [self msgDecrypt];
      switch (x) {
        case 0:
        [self outRotateSliceWithInt:0 withIntArray:codeNum];
        [self outSlicetoCubeWithInt:0 withIntArray:codeNum];
        x++;
        break;
        case 1:
        [self outRotateSliceWithInt:1 withIntArray:codeNum];
        [self outSlicetoCubeWithInt:1 withIntArray:codeNum];
        x++;
        break;
        case 2:
        [self outRotateSliceWithInt:2 withIntArray:codeNum];
        [self outSlicetoCubeWithInt:2 withIntArray:codeNum];
        x++;
        break;
        case 3:
        [self outRotateSliceWithInt:3 withIntArray:codeNum];
        [self outSlicetoCubeWithInt:3 withIntArray:codeNum];
        for (int jj = 0; jj < 4; jj++) {
          for (int kk = 0; kk < 4; kk++) {
            for (int ll = 0; ll < 4; ll++) {
              JreOperatorRetainedAssign(&cryptim_outputc_, nil, [NSString stringWithFormat:@"%@%C", cryptim_outputc_, IOSCharArray_Get(nil_chk([JavaLangCharacter toCharsWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(sliceState_), ll)), jj)), kk)]), 0)]);
            }
          }
        }
        x = 0;
        break;
      }
      i = -1;
    }
  }
  [self displayProgressWithInt:(int) ((j / progress) * 100)];
}

- (void)inEnZ {
  int KIRALOOPMSG = 0;
  int KIRALOOPMSGc = 0;
  int y, i, j;
  IOSIntArray *codeNum = [IOSIntArray arrayWithLength:16];
  IOSIntArray *keyNum = [IOSIntArray arrayWithLength:16];
  NSString *tempKey = cryptim_tempKeyD_;
  NSString *tempCode = cryptim_tempCodeD_;
  int lengthKey = [((NSString *) nil_chk(tempKey)) length];
  int lengthCode = [((NSString *) nil_chk(tempCode)) length];
  if (lengthKey % 16 != 0) {
    for (i = lengthKey % 16; i < 16; i++) {
      tempKey = [NSString stringWithFormat:@"%@ ", tempKey];
    }
  }
  for (i = 0, j = 0; j < [tempKey length]; j++, i++) {
    KIRALOOPMSG++;
    (*IOSIntArray_GetRef(keyNum, i)) = [tempKey charAtWithInt:i];
    if (i == 15) {
      [self getKeyWithIntArray:keyNum];
      i = -1;
    }
  }
  [self keyGeneration];
  if (lengthCode % 64 != 0) {
    for (i = lengthCode % 64; i < 64; i++) {
      tempCode = [NSString stringWithFormat:@"%@ ", tempCode];
    }
  }
  int s;
  float progress = [tempCode length];
  for (s = 0, y = 0, i = 0, j = 0; j < [tempCode length]; j++, i++) {
    if ((j % 5) == 1) {
      [self displayProgressWithInt:(int) ((j / progress) * 100)];
    }
    KIRALOOPMSGc++;
    (*IOSIntArray_GetRef(codeNum, i)) = ([tempCode charAtWithInt:j]);
    if (i == 15) {
      switch (y) {
        case 0:
        [self getSlicetoCubeZWithInt:0 withIntArray:codeNum];
        y++;
        break;
        case 1:
        [self getSlicetoCubeZWithInt:1 withIntArray:codeNum];
        ;
        y++;
        break;
        case 2:
        [self getSlicetoCubeZWithInt:2 withIntArray:codeNum];
        ;
        y++;
        break;
        case 3:
        [self getSlicetoCubeZWithInt:3 withIntArray:codeNum];
        y = 0;
        s++;
        for (int slice = 0; slice < 4; slice++) {
          [self getRotateSliceWithInt:slice];
          [self msgEncrypt];
          [self outSliceWithIntArray:codeNum];
          for (i = 0; i < 16; i++) {
            JreOperatorRetainedAssign(&cryptim_outputc_, nil, [NSString stringWithFormat:@"%@%C", cryptim_outputc_, IOSCharArray_Get(nil_chk([JavaLangCharacter toCharsWithInt:IOSIntArray_Get(codeNum, i)]), 0)]);
            JreOperatorRetainedAssign(&cryptim_outputh_, nil, [NSString stringWithFormat:@"%@%@", cryptim_outputh_, [self hexFormatWithInt:IOSIntArray_Get(codeNum, i)]]);
          }
        }
        break;
      }
      i = -1;
    }
  }
  [self displayProgressWithInt:(int) ((j / progress) * 100)];
}

- (void)inDeZ {
  int x, i, j;
  IOSIntArray *codeNum = [IOSIntArray arrayWithLength:16];
  IOSIntArray *keyNum = [IOSIntArray arrayWithLength:16];
  NSString *tempKey = cryptim_tempKeyD_;
  NSString *tempCode = cryptim_tempCodeD_;
  int lengthKey = [((NSString *) nil_chk(tempKey)) length];
  int lengthCode = [((NSString *) nil_chk(tempCode)) length];
  NSString *output = @"";
  if (lengthKey % 16 != 0) {
    for (i = lengthKey % 16; i < 16; i++) {
      tempKey = [NSString stringWithFormat:@"%@ ", tempKey];
    }
  }
  for (i = 0, j = 0; j < [tempKey length]; j++, i++) {
    (*IOSIntArray_GetRef(keyNum, i)) = [tempKey charAtWithInt:i];
    if (i == 15) {
      [self getKeyWithIntArray:keyNum];
      i = -1;
    }
  }
  [self keyGeneration];
  if (lengthCode % 64 != 0) {
    for (i = lengthCode % 64; i < 64; i++) {
      tempCode = [NSString stringWithFormat:@"%@ ", tempCode];
    }
  }
  int t = 0;
  float progress = [tempCode length];
  for (x = 0, i = 0, j = 0; j < [tempCode length]; j++, i++) {
    if ((j % 5) == 1) {
      [self displayProgressWithInt:(int) ((j / progress) * 100)];
    }
    (*IOSIntArray_GetRef(codeNum, i)) = ([tempCode charAtWithInt:j]);
    if (i == 15) {
      [self getSliceWithIntArray:codeNum];
      [self msgDecrypt];
      switch (x) {
        case 0:
        [self outRotateSliceWithInt:0 withIntArray:codeNum];
        [self outSlicetoCubeWithInt:0 withIntArray:codeNum];
        x++;
        break;
        case 1:
        [self outRotateSliceWithInt:1 withIntArray:codeNum];
        [self outSlicetoCubeWithInt:1 withIntArray:codeNum];
        x++;
        break;
        case 2:
        [self outRotateSliceWithInt:2 withIntArray:codeNum];
        [self outSlicetoCubeWithInt:2 withIntArray:codeNum];
        x++;
        break;
        case 3:
        [self outRotateSliceWithInt:3 withIntArray:codeNum];
        [self outSlicetoCubeWithInt:3 withIntArray:codeNum];
        for (int jj = 0; jj < 4; jj++) {
          for (int kk = 0; kk < 4; kk++) {
            for (int ll = 0; ll < 4; ll++) {
              JreOperatorRetainedAssign(&cryptim_outputc_, nil, [NSString stringWithFormat:@"%@%C", cryptim_outputc_, IOSCharArray_Get(nil_chk([JavaLangCharacter toCharsWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(sliceState_), ll)), kk)), jj)]), 0)]);
            }
          }
        }
        x = 0;
        break;
      }
      i = -1;
    }
  }
  [self displayProgressWithInt:(int) ((j / progress) * 100)];
}

- (void)inEnData {
  JreOperatorRetainedAssign(&cryptim_tempKeyD_, nil, @"kuncirahsia");
  JreOperatorRetainedAssign(&cryptim_tempCodeD_, nil, @"this is plaintext");
  JreOperatorRetainedAssign(&cryptim_outputh_, nil, @"");
  JreOperatorRetainedAssign(&cryptim_outputc_, nil, @"");
}

- (void)outEnData {
  JreOperatorRetainedAssign(&cryptim_inEnTextArea_, nil, cryptim_outputh_);
  JreOperatorRetainedAssign(&cryptim_inTempTextArea_, nil, cryptim_outputc_);
}

- (void)inDeData {
  JreOperatorRetainedAssign(&cryptim_outputc_, nil, @"");
}

- (void)outDeData {
  JreOperatorRetainedAssign(&cryptim_inDeTextArea_, nil, cryptim_outputc_);
}

- (void)fEnData {
  JreOperatorRetainedAssign(&cryptim_tempKeyD_, nil, cryptim_fKTextArea_);
  JreOperatorRetainedAssign(&cryptim_tempCodeD_, nil, cryptim_fPTextArea_);
  JreOperatorRetainedAssign(&cryptim_outputh_, nil, @"");
  JreOperatorRetainedAssign(&cryptim_outputc_, nil, @"");
}

- (void)fDeData {
  JreOperatorRetainedAssign(&cryptim_tempKeyD_, nil, cryptim_fKTextArea_);
  JreOperatorRetainedAssign(&cryptim_tempCodeD_, nil, [self convertHexToStringWithNSString:cryptim_fPTextArea_]);
  JreOperatorRetainedAssign(&cryptim_outputc_, nil, @"");
}

- (void)displayProgressWithInt:(int)pL {
  if (tabFlag_ == 1) {
  }
  else if (tabFlag_ == 2) {
  }
}

- (NSString *)convertHexToStringWithNSString:(NSString *)hex {
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] init] autorelease];
  JavaLangStringBuilder *temp = [[[JavaLangStringBuilder alloc] init] autorelease];
  for (int i = 0; i < [((NSString *) nil_chk(hex)) length] - 1; i += 2) {
    NSString *output = [hex substring:i endIndex:(i + 2)];
    int decimal = [JavaLangInteger parseIntWithNSString:output withInt:16];
    [sb appendWithChar:(unichar) decimal];
    [temp appendWithInt:decimal];
  }
  return [sb description];
}

- (void)inStartButtonActionPerformed {
  NSString *commandF = @"en";
  NSString *commandR = @"xaxis";
  tabFlag_ = 1;
  if ([commandF isEqual:@"en"]) {
    [self inEnData];
    if ([commandR isEqual:@"xaxis"]) {
      [self inEnX];
    }
    else if ([commandR isEqual:@"yaxis"]) {
      [self inEnY];
    }
    else if ([commandR isEqual:@"zaxis"]) {
      [self inEnZ];
    }
    [self outEnData];
  }
  else if ([commandF isEqual:@"de"]) {
    [self inDeData];
    if ([commandR isEqual:@"xaxis"]) {
      [self inDeX];
    }
    else if ([commandR isEqual:@"yaxis"]) {
      [self inDeY];
    }
    else if ([commandR isEqual:@"zaxis"]) {
      [self inDeZ];
    }
    [self outDeData];
  }
}

- (void)fBrowseButtonActionPerformed {
  JreOperatorRetainedAssign(&cryptim_fBrowseTextField_, nil, @"C:\\Users\\HAFIDZI\\Documents\\chan.txt");
}

- (id)init {
  if (self = [super init]) {
    cryptim_set_outputFile_(self, @"");
    tabFlag_ = 0;
    cryptim_set_S_box_(self, [IOSObjectArray arrayWithObjects:(id[]){ [IOSIntArray arrayWithInts:(int[]){ 99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118 } count:16], [IOSIntArray arrayWithInts:(int[]){ 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192 } count:16], [IOSIntArray arrayWithInts:(int[]){ 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21 } count:16], [IOSIntArray arrayWithInts:(int[]){ 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117 } count:16], [IOSIntArray arrayWithInts:(int[]){ 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132 } count:16], [IOSIntArray arrayWithInts:(int[]){ 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207 } count:16], [IOSIntArray arrayWithInts:(int[]){ 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168 } count:16], [IOSIntArray arrayWithInts:(int[]){ 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210 } count:16], [IOSIntArray arrayWithInts:(int[]){ 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115 } count:16], [IOSIntArray arrayWithInts:(int[]){ 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219 } count:16], [IOSIntArray arrayWithInts:(int[]){ 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121 } count:16], [IOSIntArray arrayWithInts:(int[]){ 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8 } count:16], [IOSIntArray arrayWithInts:(int[]){ 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138 } count:16], [IOSIntArray arrayWithInts:(int[]){ 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158 } count:16], [IOSIntArray arrayWithInts:(int[]){ 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223 } count:16], [IOSIntArray arrayWithInts:(int[]){ 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22 } count:16] } count:16 type:[IOSIntArray iosClass]]);
    cryptim_set_S_box_inverse_(self, [IOSObjectArray arrayWithObjects:(id[]){ [IOSIntArray arrayWithInts:(int[]){ 82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251 } count:16], [IOSIntArray arrayWithInts:(int[]){ 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203 } count:16], [IOSIntArray arrayWithInts:(int[]){ 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78 } count:16], [IOSIntArray arrayWithInts:(int[]){ 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37 } count:16], [IOSIntArray arrayWithInts:(int[]){ 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146 } count:16], [IOSIntArray arrayWithInts:(int[]){ 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132 } count:16], [IOSIntArray arrayWithInts:(int[]){ 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6 } count:16], [IOSIntArray arrayWithInts:(int[]){ 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107 } count:16], [IOSIntArray arrayWithInts:(int[]){ 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115 } count:16], [IOSIntArray arrayWithInts:(int[]){ 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110 } count:16], [IOSIntArray arrayWithInts:(int[]){ 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27 } count:16], [IOSIntArray arrayWithInts:(int[]){ 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244 } count:16], [IOSIntArray arrayWithInts:(int[]){ 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95 } count:16], [IOSIntArray arrayWithInts:(int[]){ 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239 } count:16], [IOSIntArray arrayWithInts:(int[]){ 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97 } count:16], [IOSIntArray arrayWithInts:(int[]){ 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125 } count:16] } count:16 type:[IOSIntArray iosClass]]);
    cryptim_set_key_(self, [IOSIntArray arrayWithInts:(int[]){ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } count:16]);
    cryptim_set_State_(self, [IOSObjectArray arrayWithObjects:(id[]){ [IOSIntArray arrayWithInts:(int[]){ 0, 0, 0, 0 } count:4], [IOSIntArray arrayWithInts:(int[]){ 0, 0, 0, 0 } count:4], [IOSIntArray arrayWithInts:(int[]){ 0, 0, 0, 0 } count:4], [IOSIntArray arrayWithInts:(int[]){ 0, 0, 0, 0 } count:4] } count:4 type:[IOSIntArray iosClass]]);
    cryptim_set_sliceState_(self, [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ [IOSIntArray arrayWithInts:(int[]){ 0, 0, 0, 0 } count:4], [IOSIntArray arrayWithInts:(int[]){ 0, 0, 0, 0 } count:4], [IOSIntArray arrayWithInts:(int[]){ 0, 0, 0, 0 } count:4], [IOSIntArray arrayWithInts:(int[]){ 0, 0, 0, 0 } count:4] } count:4 type:[IOSIntArray iosClass]], [IOSObjectArray arrayWithObjects:(id[]){ [IOSIntArray arrayWithInts:(int[]){ 0, 0, 0, 0 } count:4], [IOSIntArray arrayWithInts:(int[]){ 0, 0, 0, 0 } count:4], [IOSIntArray arrayWithInts:(int[]){ 0, 0, 0, 0 } count:4], [IOSIntArray arrayWithInts:(int[]){ 0, 0, 0, 0 } count:4] } count:4 type:[IOSIntArray iosClass]], [IOSObjectArray arrayWithObjects:(id[]){ [IOSIntArray arrayWithInts:(int[]){ 0, 0, 0, 0 } count:4], [IOSIntArray arrayWithInts:(int[]){ 0, 0, 0, 0 } count:4], [IOSIntArray arrayWithInts:(int[]){ 0, 0, 0, 0 } count:4], [IOSIntArray arrayWithInts:(int[]){ 0, 0, 0, 0 } count:4] } count:4 type:[IOSIntArray iosClass]], [IOSObjectArray arrayWithObjects:(id[]){ [IOSIntArray arrayWithInts:(int[]){ 0, 0, 0, 0 } count:4], [IOSIntArray arrayWithInts:(int[]){ 0, 0, 0, 0 } count:4], [IOSIntArray arrayWithInts:(int[]){ 0, 0, 0, 0 } count:4], [IOSIntArray arrayWithInts:(int[]){ 0, 0, 0, 0 } count:4] } count:4 type:[IOSIntArray iosClass]] } count:4 type:[IOSIntArray iosClassWithDimensions:2]]);
    cryptim_set_extend_key_(self, [IOSIntArray arrayWithLength:176]);
    cryptim_set_Rcon_(self, [IOSIntArray arrayWithInts:(int[]){ 0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54 } count:11]);
    [self inStartButtonActionPerformed];
    [((JavaIoPrintStream *) nil_chk([JavaLangSystem out])) printlnWithNSString:[NSString stringWithFormat:@"Input From Plain Text : %@", cryptim_tempCodeD_]];
    [[JavaLangSystem out] printlnWithNSString:[NSString stringWithFormat:@"Secret Key 16 Character : %@", cryptim_tempKeyD_]];
    [[JavaLangSystem out] printlnWithNSString:[NSString stringWithFormat:@"output : %@", cryptim_outputh_]];
  }
  return self;
}

- (void)dealloc {
  cryptim_set_outputFile_(self, nil);
  cryptim_set_S_box_(self, nil);
  cryptim_set_S_box_inverse_(self, nil);
  cryptim_set_key_(self, nil);
  cryptim_set_State_(self, nil);
  cryptim_set_sliceState_(self, nil);
  cryptim_set_extend_key_(self, nil);
  cryptim_set_Rcon_(self, nil);
  [super dealloc];
}

- (void)copyAllFieldsTo:(cryptim *)other {
  [super copyAllFieldsTo:other];
  cryptim_set_Rcon_(other, Rcon_);
  cryptim_set_S_box_(other, S_box_);
  cryptim_set_S_box_inverse_(other, S_box_inverse_);
  cryptim_set_State_(other, State_);
  cryptim_set_extend_key_(other, extend_key_);
  cryptim_set_key_(other, key_);
  cryptim_set_outputFile_(other, outputFile_);
  cryptim_set_sliceState_(other, sliceState_);
  other->tabFlag_ = tabFlag_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "mainWithNSStringArray:", "main", "V", 0x9, NULL },
    { "RotWordWithIntArray:", "RotWord", "V", 0x1, NULL },
    { "SubWordWithInt:", "SubWord", "I", 0x1, NULL },
    { "SubWord_inverseWithInt:", "SubWord_inverse", "I", 0x1, NULL },
    { "hexFormatWithInt:", "hexFormat", "Ljava.lang.String;", 0x1, NULL },
    { "keyGeneration", NULL, "V", 0x1, NULL },
    { "msgEncrypt", NULL, "V", 0x1, NULL },
    { "roundLoopWithInt:", "roundLoop", "V", 0x1, NULL },
    { "MixColumn", NULL, "V", 0x1, NULL },
    { "MultiWithInt:withInt:", "Multi", "I", 0x1, NULL },
    { "msgDecrypt", NULL, "V", 0x1, NULL },
    { "roundLoop_inverseWithInt:", "roundLoop_inverse", "V", 0x1, NULL },
    { "MixColumn_inverse", NULL, "V", 0x1, NULL },
    { "getSliceWithIntArray:", "getSlice", "V", 0x1, NULL },
    { "getSlicetoCubeXWithInt:withIntArray:", "getSlicetoCubeX", "V", 0x1, NULL },
    { "getSlicetoCubeYWithInt:withIntArray:", "getSlicetoCubeY", "V", 0x1, NULL },
    { "getSlicetoCubeZWithInt:withIntArray:", "getSlicetoCubeZ", "V", 0x1, NULL },
    { "getRotateSliceWithInt:", "getRotateSlice", "V", 0x1, NULL },
    { "outSliceWithIntArray:", "outSlice", "V", 0x1, NULL },
    { "outRotateSliceWithInt:withIntArray:", "outRotateSlice", "V", 0x1, NULL },
    { "outSlicetoCubeWithInt:withIntArray:", "outSlicetoCube", "V", 0x1, NULL },
    { "getKeyWithIntArray:", "getKey", "V", 0x1, NULL },
    { "inEnX", NULL, "V", 0x1, NULL },
    { "inDeX", NULL, "V", 0x1, NULL },
    { "inEnY", NULL, "V", 0x1, NULL },
    { "inDeY", NULL, "V", 0x1, NULL },
    { "inEnZ", NULL, "V", 0x1, NULL },
    { "inDeZ", NULL, "V", 0x1, NULL },
    { "inEnData", NULL, "V", 0x1, NULL },
    { "outEnData", NULL, "V", 0x1, NULL },
    { "inDeData", NULL, "V", 0x1, NULL },
    { "outDeData", NULL, "V", 0x1, NULL },
    { "fEnData", NULL, "V", 0x1, NULL },
    { "fDeData", NULL, "V", 0x1, NULL },
    { "displayProgressWithInt:", "displayProgress", "V", 0x1, NULL },
    { "convertHexToStringWithNSString:", "convertHexToString", "Ljava.lang.String;", 0x1, NULL },
    { "inStartButtonActionPerformed", NULL, "V", 0x2, NULL },
    { "fBrowseButtonActionPerformed", NULL, "V", 0x2, NULL },
    { "init", "cryptim", NULL, 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "outputFile_", NULL, 0x2, "Ljava.lang.String;" },
    { "tempKeyD_", NULL, 0xa, "Ljava.lang.String;" },
    { "tempCodeD_", NULL, 0xa, "Ljava.lang.String;" },
    { "outputc_", NULL, 0xa, "Ljava.lang.String;" },
    { "outputh_", NULL, 0xa, "Ljava.lang.String;" },
    { "inEnTextArea_", NULL, 0xa, "Ljava.lang.String;" },
    { "inTempTextArea_", NULL, 0xa, "Ljava.lang.String;" },
    { "inDeTextArea_", NULL, 0xa, "Ljava.lang.String;" },
    { "fKTextArea_", NULL, 0xa, "Ljava.lang.String;" },
    { "fPTextArea_", NULL, 0xa, "Ljava.lang.String;" },
    { "fBrowseTextField_", NULL, 0xa, "Ljava.lang.String;" },
    { "tabFlag_", NULL, 0x0, "I" },
    { "S_box_", NULL, 0x2, "[[I" },
    { "S_box_inverse_", NULL, 0x2, "[[I" },
    { "key_", NULL, 0x2, "[I" },
    { "State_", NULL, 0x2, "[[I" },
    { "sliceState_", NULL, 0x2, "[[[I" },
    { "extend_key_", NULL, 0x2, "[I" },
    { "Rcon_", NULL, 0x2, "[I" },
  };
  static J2ObjcClassInfo _cryptim = { "cryptim", NULL, NULL, 0x1, 39, methods, 19, fields, 0, NULL};
  return &_cryptim;
}

@end
